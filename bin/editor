#!/bin/bash
# Wrapper around kakoune to automatically connect to a currently active session
# or create a new one.
# Also has some other tricks like opening standard input as a tmp file.
#
# Clear old sessions
kak -clear
TEMPDIR="/tmp/kak-temp"
args=()
# Open either in a new window or just in a new buffer
open_command="open-in-new-window"
# Handle command line arguments
for arg in "$@"; do
    if [ "$arg" == "-t" ]; then
        # In terminal, so no new windows
        in_terminal=true
        open_command="edit"
    else 
        args+=("$arg")
    fi
done 
# if there is standard input create a new file and open that
read -r -t 0.01 -d '' input
if [ -n "$input" ]; then
    mkdir -p $TEMPDIR
    temp=$(mktemp -p $TEMPDIR)
    echo "$input" > "$temp"
    args+=("$temp")
fi
# If no session exists, set the session to the default session
if [ -z $kak_session ]; then
    kak_session="default"
fi
# if no session with name $kak_session does not exist create one
if ! kak -l | grep "$kak_session" > /dev/null 2>&1; then
    { kak -s $kak_session -d & } >/dev/null 2>&1 </dev/null
fi
if [ $kak_client ] && [ ! $in_terminal ]; then
    # Focus the current client window to spawn a new window in the correct location (useful for i3)
    command="x11-focus $kak_client;"
fi
# If no files to edit open a scratch buffer
if [ ${#args[@]} == 0 ]; then
   # Open in new window if not in_terminal
   if [ -z $in_terminal ]; then
        command="$command new "
   fi
   command="$command edit -scratch;"
fi


# Build the command to give to kakoune
for file in "${args[@]}"; do
    filepath="$(realpath "$file")"
    if [ -z $in_terminal ]; then
        # Extra escape
        filepath="\"$filepath\""
    fi
    command="$command $open_command %{$filepath};"
done
command="$command " # cd to directory of buffer using delapouite/kakoune-cd 
# Connect to the session
# echo $command
if [ $in_terminal ]; then
    kak -c $kak_session -e "$command"
else
    echo "eval '$command'" | tee /tmp/output | kak -p $kak_session
fi
